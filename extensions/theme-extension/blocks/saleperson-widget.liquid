{% style %}
  .salesperson-chat-widget {
    position: fixed;
    bottom: 20px;
    right: 20px;
    z-index: 1000;
    width: 350px;
    background-color: #ffffff;
    border-radius: 16px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
    display: flex;
    flex-direction: column;
    transition: all 0.3s ease;
    max-height: 600px;
    {% if request.page_type == 'customers/login' or request.page_type == 'customers/register' %}
      display: none !important;
    {% endif %}
  }

  .salesperson-chat-widget__header {
    padding: 15px 20px;
    background-color: #4A90E2;
    color: #fff;
    border-radius: 16px 16px 0 0;
    font-weight: bold;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .salesperson-chat-widget__header-title {
    display: flex;
    align-items: center;
    gap: 10px;
  }

  .salesperson-chat-widget__avatar {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    background-color: #fff;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 18px;
  }

  .salesperson-chat-widget__messages {
    flex-grow: 1;
    overflow-y: auto;
    padding: 20px;
    display: flex;
    flex-direction: column;
    gap: 15px;
    max-height: 400px;
    background-color: #F8F9FA;
  }

  .salesperson-chat-widget__message {
    max-width: 85%;
    padding: 12px 16px;
    border-radius: 16px;
    font-size: 14px;
    line-height: 1.5;
    position: relative;
    animation: fadeIn 0.3s ease-out;
  }

  .salesperson-chat-widget__message--ai {
    background-color: #fff;
    align-self: flex-start;
    border-bottom-left-radius: 4px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    color: #2C3E50;
  }

  .salesperson-chat-widget__message--user {
    background-color: #4A90E2;
    color: #fff;
    align-self: flex-end;
    border-bottom-right-radius: 4px;
  }

  .salesperson-chat-widget__input-container {
    padding: 15px 20px;
    border-top: 1px solid #E9ECEF;
    display: flex;
    gap: 10px;
    background-color: #fff;
    border-radius: 0 0 16px 16px;
  }

  .salesperson-chat-widget__input {
    flex-grow: 1;
    padding: 12px 16px;
    border: 1px solid #E9ECEF;
    border-radius: 24px;
    font-size: 14px;
    outline: none;
    transition: border-color 0.2s;
  }

  .salesperson-chat-widget__input:focus {
    border-color: #4A90E2;
  }

  .salesperson-chat-widget__send-button {
    background-color: #4A90E2;
    color: #fff;
    border: none;
    border-radius: 24px;
    padding: 8px 20px;
    cursor: pointer;
    font-size: 14px;
    font-weight: 500;
    transition: all 0.3s ease;
  }

  .salesperson-chat-widget__send-button:hover {
    background-color: #357ABD;
    transform: translateY(-1px);
  }

  .salesperson-chat-widget__close-button {
    background: none;
    border: none;
    color: #fff;
    cursor: pointer;
    font-size: 24px;
    padding: 0;
    line-height: 1;
    transition: opacity 0.2s;
    opacity: 0.8;
  }

  .salesperson-chat-widget__close-button:hover {
    opacity: 1;
  }

  .salesperson-chat-widget__toggle-button {
    position: fixed;
    bottom: 20px;
    right: 20px;
    z-index: 999;
    background-color: #4A90E2;
    color: #fff;
    border: none;
    border-radius: 50%;
    width: 60px;
    height: 60px;
    cursor: pointer;
    display: none;
    justify-content: center;
    align-items: center;
    font-size: 28px;
    box-shadow: 0 4px 12px rgba(74, 144, 226, 0.3);
    transition: all 0.3s ease;
  }

  .salesperson-chat-widget__toggle-button:hover {
    background-color: #357ABD;
    transform: scale(1.05);
  }

  .salesperson-chat-widget--hidden {
    opacity: 0;
    transform: translateY(20px);
    pointer-events: none;
  }

  .salesperson-chat-widget__toggle-button--visible {
    display: flex;
  }

  .salesperson-chat-widget__typing {
    display: flex;
    gap: 4px;
    padding: 8px 12px;
    background-color: #fff;
    border-radius: 12px;
    align-self: flex-start;
    margin-top: 4px;
  }

  .salesperson-chat-widget__typing-dot {
    width: 6px;
    height: 6px;
    background-color: #4A90E2;
    border-radius: 50%;
    animation: typing 1.4s infinite;
  }

  .salesperson-chat-widget__typing-dot:nth-child(2) {
    animation-delay: 0.2s;
  }

  .salesperson-chat-widget__typing-dot:nth-child(3) {
    animation-delay: 0.4s;
  }

  @keyframes typing {
    0%, 60%, 100% {
      transform: translateY(0);
    }
    30% {
      transform: translateY(-4px);
    }
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
{% endstyle %}

<button id="chatToggleButton" class="salesperson-chat-widget__toggle-button">
  üíÅ‚Äç‚ôÄÔ∏è
</button>

<div id="chatWidget" class="salesperson-chat-widget">
  {% unless request.page_type == 'customers/login' or request.page_type == 'customers/register' %}
    {% if customer %}
      <script type="application/json" id="shopify-products-data">
        {
          "products": [
            {% for product in collections.all.products %}
              {
                "ÂïÜÂìÅID": {{ product.id | json }},
                "ÂïÜÂìÅ„Çø„Ç§„Éà„É´": {{ product.title | json }},
                "ÂïÜÂìÅ„Éè„É≥„Éâ„É´": {{ product.handle | json }},
                "ÂïÜÂìÅË™¨Êòé": {{ product.description | json }},
                "ÂïÜÂìÅ„Éö„Éº„Ç∏": "{{ product.url }}",
                "ÂïÜÂìÅ„Çø„Ç§„Éó": {{ product.type | json }},
                "„Éô„É≥„ÉÄ„Éº": {{ product.vendor | json }},
                "Âú®Â∫´": {{ product.available | json }},
                "Ë≤©Â£≤‰æ°Ê†º": {{ product.price | money_without_currency | json }},
                "Ââ≤ÂºïÂâç‰æ°Ê†º": {{ product.compare_at_price | money_without_currency | json }},
                "„Éê„É™„Ç®„Éº„Ç∑„Éß„É≥": [
                  {% for variant in product.variants %}
                    {
                      "„Éê„É™„Ç®„Éº„Ç∑„Éß„É≥ID": {{ variant.id | json }},
                      "„Éê„É™„Ç®„Éº„Ç∑„Éß„É≥„Çø„Ç§„Éà„É´": {{ variant.title | json }},
                      "SKU": {{ variant.sku | json }},
                      "Âú®Â∫´": {{ variant.available | json }},
                      "Ë≤©Â£≤‰æ°Ê†º": {{ variant.price | money_without_currency | json }},
                      "Ââ≤ÂºïÂâç‰æ°Ê†º": {{ variant.compare_at_price | money_without_currency | json }},
                      "Âú®Â∫´Êï∞": {{ variant.inventory_quantity | json }}
                    }{% unless forloop.last %},{% endunless %}
                  {% endfor %}
                ]
              }{% unless forloop.last %},{% endunless %}
            {% endfor %}
          ]
        }
      </script>

      <script>
        class ChatWidget {
          constructor() {
            this.chatWidget = document.getElementById("chatWidget");
            this.toggleButton = document.getElementById("chatToggleButton");
            this.productsData = JSON.parse(
              document.getElementById("shopify-products-data").textContent
            );
            this.orderData = {};
            this.currentConversationId = null;
            this.messageContent = '';
            this.apiUrl = 'https://api.dify.ai/v1/chat-messages';
            this.apiKey = 'app-SpHrWUS88h2PrvZOz9ObzjFQ';
            this.isTyping = false;
            this.messages = [];

            this.initialize();
          }

          initialize() {
            this.renderInitialUI();
            this.setupEventListeners();
            this.sendInitialMessage();
          }

          renderInitialUI() {
            this.chatWidget.innerHTML = `
              <div class="salesperson-chat-widget__header">
                <div class="salesperson-chat-widget__header-title">
                  <div class="salesperson-chat-widget__avatar">üë©</div>
                  <span>Êé•ÂÆ¢„Ç¢„Ç∑„Çπ„Çø„É≥„Éà</span>
                </div>
                <button class="salesperson-chat-widget__close-button" id="chatCloseButton">√ó</button>
              </div>
              <div class="salesperson-chat-widget__messages" id="chat-messages">
                <div class="salesperson-chat-widget__message salesperson-chat-widget__message--ai">
                  <p>Ë™≠„ÅøËæº„Åø‰∏≠...</p>
                </div>
              </div>
              <div class="salesperson-chat-widget__input-container">
                <input type="text" class="salesperson-chat-widget__input" id="chat-input" placeholder="„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂÖ•Âäõ...">
                <button class="salesperson-chat-widget__send-button" id="send-button">ÈÄÅ‰ø°</button>
              </div>
            `;

            this.messagesContainer = document.getElementById('chat-messages');
            this.chatInput = document.getElementById('chat-input');
            this.sendButton = document.getElementById('send-button');
            this.closeButton = document.getElementById('chatCloseButton');
          }

          setupEventListeners() {
            this.sendButton.addEventListener('click', () => this.sendMessage());
            this.chatInput.addEventListener('keypress', (e) => {
              if (e.key === 'Enter') {
                this.sendMessage();
              }
            });
            this.closeButton.addEventListener('click', () => this.closeChat());
            this.toggleButton.addEventListener('click', () => this.toggleChat());
          }

          closeChat() {
            this.chatWidget.classList.add('salesperson-chat-widget--hidden');
            this.toggleButton.classList.add('salesperson-chat-widget__toggle-button--visible');
          }

          toggleChat() {
            this.chatWidget.classList.toggle('salesperson-chat-widget--hidden');
            this.toggleButton.classList.toggle('salesperson-chat-widget__toggle-button--visible');
            if (!this.chatWidget.classList.contains('salesperson-chat-widget--hidden')) {
              this.chatInput.focus();
              this.updateMessagesDisplay();
            }
          }

          showTypingIndicator() {
            if (!this.isTyping) {
              this.isTyping = true;
              const typingElement = document.createElement('div');
              typingElement.className = 'salesperson-chat-widget__typing';
              typingElement.innerHTML = `
                <div class="salesperson-chat-widget__typing-dot"></div>
                <div class="salesperson-chat-widget__typing-dot"></div>
                <div class="salesperson-chat-widget__typing-dot"></div>
              `;
              this.messagesContainer.appendChild(typingElement);
              this.scrollToBottom();
            }
          }

          hideTypingIndicator() {
            if (this.isTyping) {
              this.isTyping = false;
              const typingElement = this.messagesContainer.querySelector('.salesperson-chat-widget__typing');
              if (typingElement) {
                typingElement.remove();
              }
            }
          }

          async sendMessage() {
            const message = this.chatInput.value.trim();
            if (!message) return;

            this.appendUserMessage(message);
            this.chatInput.value = '';
            this.scrollToBottom();
            this.showTypingIndicator();

            const responseElement = this.createResponseElement();
            await this.sendMessageToAPI(message, responseElement);
            this.hideTypingIndicator();
          }

          appendUserMessage(message) {
            const messageElement = document.createElement('div');
            messageElement.className = 'salesperson-chat-widget__message salesperson-chat-widget__message--user';
            messageElement.textContent = message;
            this.messagesContainer.appendChild(messageElement);
            this.messages.push({
              type: 'user',
              content: message
            });
          }

          createResponseElement() {
            const element = document.createElement('div');
            element.className = 'salesperson-chat-widget__message salesperson-chat-widget__message--ai';
            this.messagesContainer.appendChild(element);
            return element;
          }

          scrollToBottom() {
            this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;
          }

          async sendMessageToAPI(message, responseElement) {
            try {
              const response = await this.makeAPIRequest(message);
              await this.handleStreamingResponse(response, responseElement);
            } catch (error) {
              this.handleError(error, responseElement);
            }
          }

          async makeAPIRequest(message) {
            const response = await fetch(this.apiUrl, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${this.apiKey}`
              },
              body: JSON.stringify({
                conversation_id: this.currentConversationId,
                inputs: {
                  products_data: JSON.stringify(this.productsData),
                  order_data: JSON.stringify(this.orderData)
                },
                query: message,
                response_mode: "streaming",
                user: "user"
              })
            });

            if (!response.ok) {
              const errorData = await response.json();
              throw new Error(`HTTP error! status: ${response.status}, message: ${JSON.stringify(errorData)}`);
            }

            return response;
          }

          async handleStreamingResponse(response, responseElement) {
            const reader = response.body.getReader();
            const decoder = new TextDecoder();
            let accumulatedResponse = '';

            try {
              while (true) {
                const {value, done} = await reader.read();
                if (done) break;

                const chunk = decoder.decode(value);
                const lines = chunk.split('\n');

                for (const line of lines) {
                  if (line.startsWith('data: ')) {
                    const jsonStr = line.slice(6);
                    if (jsonStr.trim() === '[DONE]') continue;

                    try {
                      const data = JSON.parse(jsonStr);
                      if (data.conversation_id && !this.currentConversationId) {
                        this.currentConversationId = data.conversation_id;
                      }
                      if (data.event === 'message') {
                        accumulatedResponse += data.answer || '';
                        responseElement.innerHTML = `<div style="white-space: pre-wrap;">${accumulatedResponse}</div>`;
                        this.scrollToBottom();
                      }
                    } catch (e) {
                      console.error('JSON parse error:', e, 'for line:', line);
                    }
                  }
                }
              }

              // „Çπ„Éà„É™„Éº„Éü„É≥„Ç∞ÂÆå‰∫ÜÂæå„Å´„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂ±•Ê≠¥„Å´ËøΩÂä†
              if (accumulatedResponse) {
                this.messages.push({
                  type: 'ai',
                  content: accumulatedResponse
                });
                this.updateMessagesDisplay();
              }
            } catch (error) {
              console.error('Streaming error:', error);
              this.handleError(error, responseElement);
            }
          }

          handleError(error, responseElement) {
            console.error('Fetch error:', error);
            let errorMessage = '„Çµ„Éº„Éê„Éº„Å®„ÅÆÈÄö‰ø°‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ';
            
            if (error.name === 'TypeError') {
              errorMessage = '„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ„Ç§„É≥„Çø„Éº„Éç„ÉÉ„ÉàÊé•Á∂ö„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ';
            } else if (error.message.includes('HTTP error!')) {
              errorMessage = `„Çµ„Éº„Éê„Éº„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ${error.message}`;
            }
            
            responseElement.innerHTML = `<p>${errorMessage}</p>`;
          }

          async sendInitialMessage() {
            try {
              const response = await this.makeAPIRequest("„Åì„Çì„Å´„Å°„ÅØ„ÄÇÂïÜÂìÅÊÉÖÂ†±„ÇíÊïô„Åà„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ");
              await this.handleInitialStreamingResponse(response);
            } catch (error) {
              this.handleInitialError(error);
            }
          }

          async handleInitialStreamingResponse(response) {
            const reader = response.body.getReader();
            const decoder = new TextDecoder();
            let accumulatedResponse = '';

            try {
              while (true) {
                const {value, done} = await reader.read();
                if (done) break;

                const chunk = decoder.decode(value);
                const lines = chunk.split('\n');

                for (const line of lines) {
                  if (line.startsWith('data: ')) {
                    const jsonStr = line.slice(6);
                    if (jsonStr.trim() === '[DONE]') continue;

                    try {
                      const data = JSON.parse(jsonStr);
                      if (data.conversation_id && !this.currentConversationId) {
                        this.currentConversationId = data.conversation_id;
                      }
                      if (data.event === 'message') {
                        accumulatedResponse += data.answer || '';
                        this.messageContent = accumulatedResponse;
                        this.updateMessagesDisplay();
                      }
                    } catch (e) {
                      console.error('JSON parse error:', e, 'for line:', line);
                    }
                  }
                }
              }

              // ÂàùÊúü„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂ±•Ê≠¥„Å´ËøΩÂä†
              if (accumulatedResponse) {
                this.messages.push({
                  type: 'ai',
                  content: accumulatedResponse
                });
                this.updateMessagesDisplay();
              }
            } catch (error) {
              console.error('Initial streaming error:', error);
              this.handleInitialError(error);
            }
          }

          updateMessagesDisplay() {
            const messagesHtml = this.messages.map(message => `
              <div class="salesperson-chat-widget__message salesperson-chat-widget__message--${message.type}">
                <div style="white-space: pre-wrap;">${message.content}</div>
              </div>
            `).join('');
            
            this.messagesContainer.innerHTML = messagesHtml;
            this.scrollToBottom();
          }

          handleInitialError(error) {
            console.error('Fetch error:', error);
            let errorMessage = '„Çµ„Éº„Éê„Éº„Å®„ÅÆÈÄö‰ø°‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ';
            
            if (error.name === 'TypeError') {
              errorMessage = '„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ„Ç§„É≥„Çø„Éº„Éç„ÉÉ„ÉàÊé•Á∂ö„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ';
            } else if (error.message.includes('HTTP error!')) {
              errorMessage = `„Çµ„Éº„Éê„Éº„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ${error.message}`;
            }
            
            this.messagesContainer.innerHTML = `
              <div class="salesperson-chat-widget__message salesperson-chat-widget__message--ai">
                <p>${errorMessage}</p>
              </div>
            `;
          }
        }

        document.addEventListener("DOMContentLoaded", function() {
          try {
            new ChatWidget();
          } catch (error) {
            console.error("Error loading chat widget:", error);
            document.getElementById("chatWidget").innerHTML = `
              <div class="salesperson-chat-widget__message salesperson-chat-widget__message--ai">
                <p>„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: ${error.message}</p>
              </div>
            `;
          }
        });
      </script>
    {% else %}
      <div class="salesperson-chat-widget__header">
        <div class="salesperson-chat-widget__header-title">
          <div class="salesperson-chat-widget__avatar">üë©</div>
          <span>Êé•ÂÆ¢„Ç¢„Ç∑„Çπ„Çø„É≥„Éà</span>
        </div>
        <button class="salesperson-chat-widget__close-button" id="chatCloseButton">√ó</button>
      </div>
      <div class="salesperson-chat-widget__messages">
        <div class="salesperson-chat-widget__message salesperson-chat-widget__message--ai">
          <p>„É≠„Ç∞„Ç§„É≥„Åó„Å¶„Éë„Éº„ÇΩ„Éä„É©„Ç§„Ç∫„Åï„Çå„ÅüÊé•ÂÆ¢„Çí‰ΩìÈ®ì„Åè„Å†„Åï„ÅÑ„ÄÇ</p>
        </div>
      </div>
      <div class="salesperson-chat-widget__input-container">
        <a href="{{ routes.account_login_url }}" class="salesperson-chat-widget__send-button">„É≠„Ç∞„Ç§„É≥</a>
        <a href="{{ routes.account_register_url }}" class="salesperson-chat-widget__send-button">Êñ∞Ë¶èÁôªÈå≤</a>
      </div>
    {% endif %}
  {% endunless %}
</div>

{% schema %}
{
  "name": "Chat Widget",
  "settings": [],
  "target": "body"
}
{% endschema %}

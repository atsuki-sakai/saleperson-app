generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime? @db.Timestamp(6)
  accessToken   String
  userId        BigInt?
  accountOwner  Boolean   @default(false)
  collaborator  Boolean?  @default(false)
  email         String?
  emailVerified Boolean?  @default(false)
  firstName     String?
  lastName      String?
  locale        String?

  @@index([shop])
}

model Store {
  id                  String         @id @default(cuid())
  storeId             String         @unique
  chatApiKey          String?
  workflowApiKey      String?
  systemPrompt        String?
  storePrompt        String?
  metaFieldDescription String?
  iconUrl            String?
  tone               String?
  blockingKeywords   String?
  chatColor          String?
  isSubscribed       Boolean?       @default(false)
  createdAt          DateTime       @default(now()) @db.Timestamp(6)
  updatedAt          DateTime       @updatedAt @db.Timestamp(6)
  knowledges         Knowledge[]
  documents          Document[]
  subscriptions      Subscription[]

  @@index([storeId])
}

model Knowledge {
  id        String   @id @default(cuid())
  datasetId String
  type      String
  store     Store    @relation(fields: [storeId], references: [id])
  storeId   String
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@index([storeId])
}

model Document {
  id        String   @id @default(cuid())
  datasetId String
  store     Store    @relation(fields: [storeId], references: [id])
  storeId   String
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@index([storeId])
}

model Subscription {
  id        String   @id @default(cuid())
  storeId   String
  store     Store    @relation(fields: [storeId], references: [id])
  plan      String
  status    String
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  @@index([storeId])
}

generator client {
  provider = "prisma-client-js"
}

/// ローカル開発時のデータベース接続設定は.envのLOCAL_DATABASE_URLを使用
/// 本番環境のデータベース接続設定は.envのDATABASE_URLを使用
datasource db {
  provider = "postgresql"
  url      =  env("DATABASE_URL")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime? @db.Timestamp(6)
  accessToken   String
  userId        BigInt?
  accountOwner  Boolean   @default(false)
  collaborator  Boolean?  @default(false)
  email         String?
  emailVerified Boolean?  @default(false)
  firstName     String?
  lastName      String?
  locale        String?

  @@index([shop])
  @@map("session")
}

/// Shopifyストアの設定とメタデータを管理するモデル
/// ストア固有の設定やLLM関連の設定を保存
model Store {
  /// ストアの一意識別子（UUID）
  id                   String     @id @default(uuid())
  /// Shopifyストアの一意識別子（## ※session.shopを使用 ##）
  storeId              String     @unique @map("storeId")
  /// ストアのアクセストークン
  accessToken          String?
  /// チャット機能用のAPIキー(ワークフローの構築後、手動で設定する必要があります)
  chatApiKey           String?
  /// ワークフロー機能用のAPIキー(ワークフローの構築後、手動で設定する必要があります)※未実装
  workflowApiKey       String?
  /// AIシステム共通のプロンプト設定
  systemPrompt         String?
  /// ストア固有のAIプロンプト設定
  storePrompt          String?
  /// チャットウィジェットのアイコンURL
  iconUrl              String?
  /// AIの応答トーン設定（例: 丁寧、カジュアル）
  tone                 String?
  /// チャットでブロックするキーワード
  blockingKeywords     String?
  /// ストアのデータセットID(１ストアに複数のデータセットID)
  datasetId            String?
  /// チャットウィジェットの色設定
  chatColor            String?
  /// レコードの作成日時
  createdAt            DateTime   @default(now()) @map("createdAt")
  /// レコードの最終更新日時
  updatedAt            DateTime   @updatedAt @map("updatedAt")
  /// ストアのよくある質問のテキスト
  faqContent           String?
  /// 商品のメタフィールドの説明(メタフィールドがある場合のみ)
  metaFieldDescription String?
  datasets            Dataset[]

  @@index([storeId])
  @@map("store")
}

/// FAQやその他のナレッジベースとなるデータセットを保存
model Dataset {
  /// データセットの一意識別子（UUID）
  id        String   @id @default(uuid())
  /// データセットのタイプ
  type      String
  /// 関連するストアのID（外部キー）
  storeId   String
  /// 関連するデータセットのID（外部キー）
  datasetId String?
  /// レコードの作成日時
  createdAt DateTime @default(now()) @map("createdAt")
  /// レコードの最終更新日時
  updatedAt DateTime @updatedAt @map("updatedAt")
  /// 作成中のデータセットのバッチID
  batchIds  String[] @default([])
  /// 作成中のデータセットの進行状況
  status    DatasetIndexingStatus @default(PENDING)
  store     Store    @relation(fields: [storeId], references: [storeId])
  
  @@index([storeId])
  @@map("dataset")
}

enum DatasetIndexingStatus {
  PENDING    // まだ同期していない
  SYNCING    // データ作成/送信中
  INDEXING   // Difyでindex中
  COMPLETED  // 完了
  ERROR      // エラー
}

